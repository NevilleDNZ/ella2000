DECS  kecodegenalienifsparc  CONTEXT VOID  USE  basics,  cif,
      kecodegenserversparc,  kecodegenstacksparc,  kemassemsparc:

{ " Id: kecodegenalienifsparc.sta,v 1.1 91/10/14 14:29:12 edcad Exp $"; }
configinfo A68CONFIG "$Id: kecodegenalienifsparc.a68,v 34.2 1995/03/29 13:04:43 ella Exp $";


COMMENT 
    ************************************************************************
    This Program is the property of the Secretary of State for Defence
    (United Kingdom) acting through the Defence Research Agency (DRA). Use,
    reproduction, production of amended versions and/or transfer of this
    Program is permitted provided that:

  (a)  this legend be preserved on any such reproduction and amended version,
  (b)  any amended version of this Program be clearly marked to show the
       nature of the amendment and of the name of the amending organisation,
  and
  (c)  any recipient  of such reproduction or amended version accept the
       conditions set out in this legend.

                         Crown Copyright, (c)   1993

                             All rights reserved.

    The Secretary of State for Defence (United Kingdom) acting through his
    Defence Research Agency (DRA) gives no warranty that any element of the
    Software is suitable for any purpose and he shall not be liable for any
    loss or damage including loss or damage resulting in injury or death
    howsoever caused which results from the use of the Software, or any
    developments adaptions modifications translations and enhancements
    thereof.

    The original authors may be contacted via email on ella@dra.hmg.gb or by
    writing to ELLA Office, DRA, St Andrews Road, Malvern, Worcs WR14 3PS, UK.
    ************************************************************************

29:11:93  Extern declaration added.  DCT
16:06:94  33.001  ELLA  NewConFig Entered in new config system previous version
                                  number  32.002 
29:03:95  34.002  ELLA  Modcprght Change copyright header
??:??:??   ?.???  ????
COMMENT
{

    This module provides the communication between the abstract machine and
    the code generator that is required for aliens, but not explicitly
    required by BIOPs.  (BIOPs use two tables with a common key of mode LABEL).

}

{ What we need to know about an alien ... }
MODE
    ALIENEVALFN = INT,          { a function address }
    ALIENINFO = STRUCT(
        LABEL label int,        { invented for abstract m/c call
				  passing integer parameter}
        LABEL label callinst,   { invented for abstract m/c call
				  passing callinst ptr }
        INT workspace size,     { in bytes, returned by finder }
        ALIENEVALFN eval fn,    { evaluation function, returned by finder }
        INT history,            { time dependency, = amount of history required }
        INT decl id             { returned by finder }
    ),
    ALIENLIST = STRUCT(REF ALIENINFO info, REF ALIENLIST next);

{ Some constants ... }
ALIENEVALFN nil alien eval fn = 0;
REF ALIENINFO nil alien info = NIL;
REF ALIENLIST nil alien list = NIL;

{
    Action values - used in call array and passed to evaluation function
    to indicate current phase.

    The values must tally with the C definition of ACI_EVAL_ACTION.
}

INT
    initialise action = 1,
    reinitialise action = 2,
    evaluate action = 3,
    save action = 4,
    restore action = 5,
    terminate action = 6;

{
    The list of all alien functions returned by the finder, plus procedures
    for adding entries and looking up entries using the label as key.
}
REF ALIENLIST aliens := nil alien list;

PROC remember alien = (REF ALIENINFO new alien)VOID:
{ adds new alien to front of list }
BEGIN
    aliens := HEAP ALIENLIST := ( new alien, aliens )
END;

PROC lookup alien = (LABEL l)REF ALIENINFO:     { return NIL if not found }
BEGIN
    REF ALIENLIST this alien := aliens;
    WHILE (this alien ISNT nil alien list)
    ANDTH
      ( (lab OF l /= lab OF label int OF info OF this alien) OREL
        (tag OF l /= tag OF label int OF info OF this alien) )
    ANDTH
      ( (lab OF l /= lab OF label callinst OF info OF this alien) OREL
        (tag OF l /= tag OF label callinst OF info OF this alien) )
    DO
        this alien := next OF this alien
    OD;
    ( this alien ISNT nil alien list | info OF this alien | nil alien info )
END;


{
    Algol interface onto the built-in finder.
    The C definition is given in the ELLA Alien Code Programmer's Guide.
    The built-in finder calls the user-supplied finder after it has looked for
    the alien code "BIOP"s.
}
PROC alien finder = (
    VECTOR [] CHAR name,
    VECTOR [] INT input types,
    INT output type,
    VECTOR [] INT macparams,
    FLTPROC flt
) REF ALIENINFO:
IF
    PROC (
        CCHARPTR,       { name }
        INT,            { UPB name }
        CINTPTR,        { input types }
        INT,            { UPB input types }
        INT,            { output type }
        CINTPTR,        { macro parameters }
        INT,            { UPB macro parameters }
        REF INT,        { workspace }
        REF INT,        { history }
        REF INT         { decl_id }
    ) ALIENEVALFN finder = ALIEN "built_in_finder"
                                 "extern A68_INT built_in_finder();";
    HEAP ALIENINFO alien info;
    workspace size OF alien info := 0;
    history OF alien info := 0;
    (eval fn OF alien info :=
        finder(
            VCTOCHARPTR (name+2r"0"), UPB name,
            VITOINTPTR input types, UPB input types,
            output type,
            VITOINTPTR macparams, UPB macparams,
            workspace size OF alien info,
            history OF alien info,
            decl id OF alien info
        )) = nil alien eval fn
THEN
    flt("Can't find the alien function named " + name );
    nil alien info
ELSE
    remember alien(alien info);
    alien info
FI;

PROC generate call alien = (REF STACKALLOCATOR s, LABEL l) BOOL:
IF
    REF ALIENINFO alien = lookup alien(l);
    alien ISNT nil alien info
THEN
    {save stack pointer & important global registers relative to
    the frame pointer. We cannot use fp -4 as this may be in use
    by the code generator (This location is used as a scratch pad
    for storing the dynamic memory pointer across a call)}

    INT ms_tos = 92; {The offset from sp of the nearest word we can safely use}

    or USING RRR(sp, g0, tempreg1);
    add USING RIR(sp, -ms_tos-(5*4), sp); {ensure sp is doubleword aligned}
    st USING RIR(fp, -8, tempreg1);
    st USING RIR(fp, -12, g1);
    st USING RIR(fp, -16, g2);
    st USING RIR(fp, -20, g3);

    {place arguments into registers: action->o0, callinstptr offset->o1}
    or USING RRR(s RSOURCE tos, g0, o0);

    IF lab OF l = lab OF label callinst OF alien
    THEN
        { 'real' callinst ptr }
        sub USING RRR(callinstpointer, globalpointer, o1)
    ELSE
        { 'callinst ptr' masquerades as integer }
        or USING RRR(s RSOURCE tos1, g0, o1)
    FI;

    {call the alien's evaluation function}
    ma mov ir (eval fn OF alien, r15);
    jmpl USING RRR(r15, r0, r15);
    nop USING IR(0, g0);

    {restore saved registers}
    ld USING RIR(fp, -20, g3);
    ld USING RIR(fp, -16, g2);
    ld USING RIR(fp, -12, g1);

    {restore the stack pointer}
    ld USING RIR(fp, -8, sp);

    TRUE
ELSE
    FALSE
FI

KEEP
    ALIENINFO, nil alien info,
    alien finder,
    ALIENEVALFN,
    generate call alien,
    initialise action,
    reinitialise action,
    evaluate action,
    save action,
    restore action,
    terminate action
FINISH
